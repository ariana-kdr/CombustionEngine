%% General

clear all;
close all;
clc;

% Add directory of Nasa routines to Matlab-path
addpath('General/Nasa');    

% Load Nasa Database
TdataBase = fullfile('General/Nasa','NasaThermalDatabase.mat');
load(TdataBase);

%Load Parameters
Load_Parameters = fullfile('Load_Parameters.mat');
load(Load_Parameters)

%Load experimental data
Experiment_Data = fullfile('Experiment_Data.mat');
load(Experiment_Data);

%Load idealized cycle
V_ideal = fullfile('V_ideal.mat');
load(V_ideal);
p_ideal = fullfile('p_ideal.mat')
load(p_ideal);
%%
% Constants 
global Runiv Pref Tref                                                      %Set global variables (so they cannot be changed)
Runiv = 8.314472;                                                           %Universal Gas Constant[J/K*mol]
Pref = 1.01235e5;                                                           %Reference Pressure (1atm) [Pa]
Tref = 298.15;                                                              %Reference Temperature [K]

% Loading chemical properties 
Fuel1 = 'Gasoline';                                                         % Make fuel its own variable for easy changes
Fuel2 = 'C2H5OH'; 
Species = Sp(myfind({Sp.Name},{Fuel1, Fuel2,'O2','CO2','H2O','N2'}));       % Subselection of species in database
NSpecies = length(Species);                                                 % Create variable for length of Species array for later use 
Mi = [Species.Mass];                                                        % Array of molecular masses for each component

%Dimensions (using dimensions found online)
B = 0.06735;                                                                  %Bore [m]
S = 0.05365;                                                                  %Stroke [m]
r = S/2;                                                                    %Radius of crank shaft [m]
L = 0.0847;                                                                %Length of rod [m]
r_c = 8.5;                                                                  %Compression Ratio [m]
V_d = pi/4*B^2*S;                                                           %Displacement Volume [m^3]
V_c = V_d/(r_c-1);                                                          %Clearance volume [m^3]
w = 50;                                                                     %Angular velocity
%% Real Cycle 

%Create empty matrices for each state property
steps = 1000;                                                               %Number of steps to be used for cycle. 10000 seems to be a good balance between precision and speed

theta_crank = zeros(1,steps);                                               %Real cycle crank angle array [rad]
p_real = zeros(1,steps);                                                    %Real cycle pressure array [Pa]                                                       
V_real = zeros(1,steps);                                                    %Real cycle volume array [m^3]
T_real = zeros(1,steps);                                                    %Real cycle temperature array [K]
m_real = zeros(1,steps);                                                    %Real cycle mass array [kg]
s_real = zeros(1,steps);                                                    %Real cycle entropy 
Q_in_real = zeros(1,steps);                                                 %Total heat in in real cycle [J]

%Create struct to combine all the results of the model

eth = [0,0.05,0.10,0.15, 0.2, 0.4, 0.6, 0.8];                                  % ethanol fractions (can be any string of numbers between 0 and 1)
%eth = [0:0.01:1];
load = ["NoLoad","HalfLoad","FullLoad"];
n_eth = length(eth);                                                        % number of ethanol blends considered

struct_eth = struct('Blend',[],'Percentage', [], 'Volume',[],'Pressure',[],'Temperature',[],'Mass', [],'Entropy',[],'Work',[],'Heat',[], 'Efficiency', [], 'Power', [],'Bsfc', [], 'SpecificEmissions', []); 
Results = struct('NoLoad', struct_eth, 'HalfLoad', struct_eth, 'FullLoad', struct_eth);

for l = 1:length(load)
    for t = 1:n_eth
    Results.(load(l))(t).Blend = 100*eth(t) + "% ethanol";
    end
    Parameters(l).Load = load(l);
end
                                                      
%Time Values
t_end = 2*(60/3000);                                                        %End time [s] (one rotation is 0.01 sec however, one cycle is two revolutions)
dt = t_end/(steps-1);                                                       %Time step to solve differential equations [s]
dthetadt = 3000/60*2*pi;                                                    %Convert speed of engine to [rad/s]
time = [0:dt:t_end];                                                        %Time array [s]

%Parameters 
method_heat_coeff = 'Honenbe';                                              %Use either Woschni or Honenberg relation
t_w = 30e-3;                                                                %Estimate of thickness wall surrounding cylinder [m]
k = 14.4;                                                                   %Conductive heat transfer coefficient [W/mK]
ignition_offset = 25;                                                       %Degrees before TDC where ignition starts


%Create vector array of crank angle and volume as a function of time
i = 0;                                                                      %Index Value
for t = [0:dt:t_end]
    i = i+1;                                                                %Update Index
    theta_crank(i) = t*dthetadt;                                            %Calculate angle for each time instance
    V_real(i) = Vcyl(theta_crank(i),B,r,L,V_c);                             %Calculate volume for angle using volume function
end
theta_crank_degrees = theta_crank.*(180/pi);                                %Convert crank angle to degrees for easy life

%% Loop

for l = 1:length(load)    
p = 0;

%Load in parameters from struct depending on load
ignition_duration = Load_Parameters(l).Ignition_duration;
beta_intake = Load_Parameters(l).Beta_intake;
beta_exhaust = Load_Parameters(l).Beta_exhaust;

for e = eth
p = p + 1;

%Calculate Fuel Properties
x = (1 - e)*Species(1).Elcomp(3) + e*Species(2).Elcomp(3);                  % Summing the moles of given ethanol/gasoline ratio for carbon
y = (1 - e)*Species(1).Elcomp(2) + e*Species(2).Elcomp(2);                  % Summing the moles of given ethanol/gasoline ratio for hydrogen
z = (1 - e)*Species(1).Elcomp(1) + e*Species(2).Elcomp(1);                  % Summing the moles of given ethanol/gasoline ratio for oxygen

a = x + y/4 - z/2;

% Number of moles in chemical reaction
N_reac = [1-e e a 0 0 a*3.76];
N_prod = [0 0 0 x y/2 a*3.76];

% Mole Fractions using balanced chemical equation
X_reac = N_reac/sum(N_reac);
X_prod = N_prod/sum(N_prod);

%Convert to mass fractions
Y_reac = (X_reac.*Mi)/(X_reac*Mi');
Y_prod = (X_prod.*Mi)/(X_prod*Mi');

%Molar mass
M_reac = X_reac*Mi';
M_prod = X_prod*Mi';

%Gas constants
R_reac = Runiv/M_reac;
R_prod = Runiv/M_prod;


%Set the angle for the start position of each of the stages
theta_intake_stroke = 0;
theta_compression = 240;
theta_ignition = 360-ignition_offset;                                       
theta_expansion = theta_ignition+ignition_duration;
theta_valve_exhaust = 530;
theta_exhaust_stroke = 540;

%Find the index in the crank angle vector array for which it is at this
%angle
index_intake_stroke = max(find(theta_crank_degrees==theta_intake_stroke));
%Since angle is never perfectly 180 take max index where it is lower and
%add one (cheap workaround)
index_compression = max(find(theta_crank_degrees<theta_compression))+1;
index_ignition = max(find(theta_crank_degrees<theta_ignition))+1;
index_expansion = max(find(theta_crank_degrees<theta_expansion))+1;
index_valve_exhaust = max(find(theta_crank_degrees<theta_valve_exhaust))+1;
index_exhaust_stroke = max(find(theta_crank_degrees<theta_exhaust_stroke))+1;

%Find the time instant for each start of the strokes
time_intake_stroke = time(index_intake_stroke);
time_compression = time(index_compression);
time_ignition = time(index_ignition);
time_expansion = time(index_expansion);
time_valve_exhaust = time(index_valve_exhaust);
time_exhaust_stroke = time(index_exhaust_stroke);

%% Real Intake Stroke
%Still the same as ideal, have to add negative work

i = 1;                                                                      %Index Value

%Calculate lower heating value		
for j = [1:length(Species)]		
    h_0(j) = HNasa(Tref,Species(j));                                        %Calculate enthalpy of formation for each species		
end		
%Lower heating value of gasoline + ethanol[J/kg] 		
%Found to be 4.3416e6 [J/kg] online for gasoline		
Q_lhv = Y_reac/(Y_reac(1) + Y_reac(2))*h_0' - Y_prod/(Y_reac(1) + Y_reac(2))*h_0';

m_real(i) = (Pref*V_real(i))/(Tref*R_reac);
p_real(i) = Pref;
m_start = m_real(1);

for t = [time_intake_stroke+dt:dt:time_compression]                         %Start to end time
    i = i+1;    
    %Calculate the volumetric heat capacity for each molecule
    for j = [1:length(Species)]
        Cvj(j) = CvNasa(T_real(i-1),Species(j));
    end
    Cv = Y_reac*Cvj';
  
    %Calculate entropy
    for j = [1:length(Species)]
        sj(j)= SNasa(T_real(i),Species(j));
    end
    s_real(i)= Y_reac*sj' - R_reac * (log(p_real(i))-log(Pref));
    
    %beta_intake = 0.000005;
    
    dmdt = beta_intake*(Pref-p_real(i-1))^(0.5);
    m_real(i) = m_real(i-1)+dt*real(dmdt);

    %Calculate thermal resistance depending on method selected
    if method_heat_coeff == 'Woschni'
        alpha = 1/(1/Woschni(B,p_real(i-1),T_real(i-1),S)+t_w/k);           %Thermal Resistance
    else 
        alpha = 1/(1/Honenberg(p_real(i-1),T_real(i-1),V_real(i-1),S)+t_w/k); %Total Thermal Resistance
    end
    
    %Euler Forward Method:   
    dTdt = -(alpha*Acyl(theta_crank(i-1),B,r,L))/(m_real(i-1)*Cv)*(T_real(i-1)-Tref)-(R_reac*T_real(i-1))/(V_real(i-1)*Cv)*dVdt(theta_crank(i),dthetadt,B,r,L);
    %T_real(i)= T_real(i-1)+dt*dTdt;
    T_real(i)= Tref;

    p_real(i)= (m_real(i)*R_reac*T_real(i))/(V_real(i));                    %Ideal Gas Law
end
m_end = m_real(i);
%% Real compression
%No longer adiabatic, heat loss to surroundings is implemented

for t = [time_compression+dt:dt:time_ignition]
    i = i+1;                                                                %Keep updating same index as last time

    %Calculate the volumetric heat capacity for each molecule
    for j = [1:length(Species)]
        Cvj(j) = CvNasa(T_real(i-1),Species(j));
    end
    Cv = Y_reac*Cvj';                                                       %Calculate total heat capacity using mass fractions

    m_real(i) = m_real(i-1);                                                %Mass stays constant since valves are closed

    %Calculate thermal resistance depending on method selected
    if method_heat_coeff == 'Woschni'
        alpha = 1/(1/Woschni(B,p_real(i-1),T_real(i-1),S)+t_w/k);           %Thermal Resistance
    else 
        alpha = 1/(1/Honenberg(p_real(i-1),T_real(i-1),V_real(i-1),S)+t_w/k); %Total Thermal Resistance
    end

    %Euler Forward Method:   
    dTdt = -(alpha*Acyl(theta_crank(i-1),B,r,L))/(m_real(i-1)*Cv)*(T_real(i-1)-Tref)-(R_reac*T_real(i-1))/(V_real(i-1)*Cv)*dVdt(theta_crank(i),dthetadt,B,r,L);
    T_real(i)= T_real(i-1)+dt*dTdt;

    p_real(i)= (m_real(i)*R_reac*T_real(i))/(V_real(i));                    %Ideal Gas Law

    %Calculate entropy
    for j = [1:length(Species)]
        sj(j)= SNasa(T_real(i),Species(j));
    end
    s_real(i) = Y_reac*sj' - R_reac*(log(p_real(i))-log(Pref));
end
%% Real Ignition

n = 3;                                                                      %Wiebe Form Factor (experimental)
a = 5;                                                                      %Wiebe Efficiency Factor (expirimental)
theta_s = theta_ignition*pi/180;                                            %Start angle of combustion [rad]
theta_d = ignition_duration*pi/180;                                         %Combustion duration [rad]
m_f = Y_reac(1)*m_real(i);                                                  %Mass of fuel using mass composition [kg]
m_f = Y_reac(1)*m_real(i)+Y_reac(2)*m_real(i);                              %Mass of fuel using mass composition [kg]

for t = [time_ignition+dt:dt:time_expansion]
    i = i+1;
    for j = [1:length(Species)]
        Cv_2i(j) = CvNasa(T_real(i-1),Species(j));                          %Volumetric Heat Capacity at T for each species
    end
    Cv_2_reac = Y_reac*Cv_2i';                                              %Volumetric Heat Capacity of Reactants [J/KgK]
    Cv_2_prod = Y_prod*Cv_2i';                                              %Volumetric Heat Capacity of Products [J/KgK]

    %Calculate the Heat Capacity and gas constant of the mixture using the
    %fraction of mass that has combusted (Wiebe Function)
    Cv_2 = (1-Wiebe(n,a,theta_crank(i-1),theta_s,theta_d))*Cv_2_reac+Wiebe(n,a,theta_crank(i-1),theta_s,theta_d)*Cv_2_prod;
    R = (1-Wiebe(n,a,theta_crank(i-1),theta_s,theta_d))*R_reac+Wiebe(n,a,theta_crank(i-1),theta_s,theta_d)*R_prod;

    m_real(i) = m_real(i-1);                                                %Mass stays constant since valves are closed

     %Calculate thermal resistance depending on method selected
    if method_heat_coeff == 'Woschni'
        alpha = 1/(1/Woschni(B,p_real(i-1),T_real(i-1),S)+t_w/k);
    else 
        alpha = 1/(1/Honenberg(p_real(i-1),T_real(i-1),V_real(i-1),S)+t_w/k);
    end

    %Euler Forward Method
    dmdt = dmdtheta(m_f,n,a,theta_crank(i-1),theta_s,theta_d)*dthetadt;		    dTdt = (Q_lhv)/(m_real(i-1)*Cv_2)*dmdtheta(m_f,n,a,theta_crank(i-1),theta_s,theta_d)*dthetadt-(alpha*Acyl(theta_crank(i-1),B,r,L))/(m_real(i)*Cv)*(T_real(i-1)-Tref)-(R*T_real(i-1))/(V_real(i-1)*Cv)*dVdt(theta_crank(i),dthetadt,B,r,L);
    dQdt = Q_lhv*dmdt;		
    dTdt = (dQdt)/(m_real(i-1)*Cv_2)-(alpha*Acyl(theta_crank(i-1),B,r,L))/(m_real(i)*Cv)*(T_real(i-1)-Tref)-(R*T_real(i-1))/(V_real(i-1)*Cv)*dVdt(theta_crank(i),dthetadt,B,r,L);
    T_real(i)= T_real(i-1)+dt*dTdt;

    Q_in_real(i) = Q_in_real(i-1) + dt*dQdt;
    
    p_real(i)= (m_real(i)*R*T_real(i))/(V_real(i));                         %Ideal Gas Law
    
    for j = [1:length(Species)] 		
        sj(j)= SNasa(T_real(i),Species(j));		
    end		

     s_real(i)= ((1-Wiebe(n,a,theta_crank(i-1),theta_s,theta_d))*Y_reac+Wiebe(n,a,theta_crank(i-1),theta_s,theta_d)*Y_prod)*sj' ...		
        - ((1-Wiebe(n,a,theta_crank(i-1),theta_s,theta_d))*R_reac+Wiebe(n,a,theta_crank(i-1),theta_s,theta_d)*R_prod)*(log(p_real(i))-log(Pref));   %Total entropy based on mass fraction of reac and prod
    
end
%% Real Power Stroke 

for t = [time_expansion+dt:dt:time_valve_exhaust]
    i = i+1;                                                                %Keep updating same index as last time

    %Calculate the volumetric heat capacity for each molecule
    for j = [1:length(Species)]
        Cvj(j) = CvNasa(T_real(i-1),Species(j));
    end
    Cv = Y_prod*Cvj';                                                       %Calculate total heat capacity using mass fractions

    m_real(i) = m_real(i-1);                                                %Mass stays constant since valves are closed

    %Calculate thermal resistance depending on method selected
    if method_heat_coeff == 'Woschni'
        alpha = 1/(1/Woschni(B,p_real(i-1),T_real(i-1),S)+t_w/k);
    else 
        alpha = 1/(1/Honenberg(p_real(i-1),T_real(i-1),V_real(i-1),S)+t_w/k);
    end

    %Euler Forward Method:
    dTdt = -(alpha*Acyl(theta_crank(i-1),B,r,L))/(m_real(i-1)*Cv)*(T_real(i-1)-Tref)-(R_prod*T_real(i-1))/(V_real(i-1)*Cv)*dVdt(theta_crank(i),dthetadt,B,r,L);
    T_real(i)= T_real(i-1)+dt*dTdt;

    p_real(i)= (m_real(i)*R_prod*T_real(i))/(V_real(i));                    %Ideal Gas Law

    %Calculate entropy
    for j = [1:length(Species)]
        sj(j)= SNasa(T_real(i),Species(j));
    end
    s_real(i)= Y_prod*sj' - R_prod * (log(p_real(i))-log(Pref));
end
%% Real Exhaust Stroke

for t = [time_valve_exhaust+dt:dt:t_end]
    i = i+1;
    
    for j = [1:length(Species)]
        Cvj(j) = CvNasa(T_real(i-1),Species(j));
    end
    Cv = Y_prod*Cvj';
    
    delta_P = p_real(i-1)-Pref;

    dmdt = beta_exhaust*(delta_P)^(0.5);
    m_real(i) = m_real(i-1)-dt*real(dmdt);
    
    dTdt = -(alpha*Acyl(theta_crank(i-1),B,r,L))/(m_real(i-1)*Cv)*(T_real(i-1)-Tref)-(R_prod*T_real(i-1))/(V_real(i-1)*Cv)*dVdt(theta_crank(i),dthetadt,B,r,L);
    T_real(i)= T_real(i-1)+dt*dTdt;
    
    p_real(i)= (m_real(i)*R_prod*T_real(i))/(V_real(i));                    %Ideal Gas Law
end

%Calculate entropy - NEEDS TO BE FIXED FOR VALVE EXHAUST
for j = [1:length(Species)]
    sj(j)= SNasa(T_real(i),Species(j));
end
s_real(i)= Y_prod*sj' - R_prod * (log(p_real(i))-log(Pref));
%% Work, Power, Efficiency & Other Key Figures Calculations
W_index = (cumtrapz(V_real,p_real));                                        %Index of work done throughout cycle [J]
W = W_index(end);                                                           %Total work done per cycle [J]

P = W*3000/2*60;                                                                    %Power of engine [W]

Q_in = max(Q_in_real);                                                      %Heat added per cycle
n_W = abs(W/Q_in);                                                           %Efficiency using work and heat intake                                                  
n_C = 1 - abs(min(T_real)/max(T_real));                                                     %Maximum carnot efficiency

m_dot = (m_end-m_start)/0.04;
m_dot_fuel = m_dot*Y_reac(1)+m_dot*Y_reac(2);
bsfc = (3600*m_dot_fuel*1e3)/(P*1e-3);
m_dot_CO2 = m_dot*Y_prod(4);
specific_emissions = (3600*m_dot_CO2*1e3)/(P*1e-3);

%% Record results in struc
Results.(load(l))(p).Percentage = e;
Results.(load(l))(p).Volume= V_real;
Results.(load(l))(p).Pressure = p_real;
Results.(load(l))(p).Temperature = T_real;
Results.(load(l))(p).Mass = m_real;
Results.(load(l))(p).Entropy = s_real;
Results.(load(l))(p).Work = W;
Results.(load(l))(p).Heat = Q_in;
Results.(load(l))(p).Efficiency = n_W;
Results.(load(l))(p).Power = P;
Results.(load(l))(p).Bsfc = bsfc;
Results.(load(l))(p).SpecificEmissions = specific_emissions;
end
end
%% Figures

figure 
hold on 
%set(gca,'FontSize',18) 
title('P-v Diagram for the Real Cycle')
xlabel('Volume [m^3]')
ylabel('Pressure [bar]')

xlim([0 inf])
ylim([0 inf])

grid on
 
for p = 1:n_eth
plot(Results.('NoLoad')(p).Volume,Results.('NoLoad')(p).Pressure.*1e-5)
plot(Results.('HalfLoad')(p).Volume,Results.('HalfLoad')(p).Pressure.*1e-5)
plot(Results.('FullLoad')(p).Volume,Results.('FullLoad')(p).Pressure.*1e-5)
end

legend('No Load', 'Half Load', 'Full Load')
 
hold off


for l = 1:length(load)
loadtype = char(load(l));
    
figure 
hold on  
title('Results ' + convertCharsToStrings(loadtype(1:strlength(loadtype)-4)) + ' ' + convertCharsToStrings(loadtype(strlength(loadtype)-3:strlength(loadtype))) + ' All Ethanol Blends')
xlabel('Volume [m^3]')
ylabel('Pressure [bar]')
xlim([0 inf])
ylim([0 inf])

grid on
for p = 1:n_eth
plot(Results.(load(l))(p).Volume,Results.(load(l))(p).Pressure.*1e-5)
end
legend(100*eth + "% Ethanol")
hold off
end

figure 
hold on
for l = 1:length(load)
    l_flip = length(load)+1-l;
    
    title('Efficiency for Different Blends')
    xlabel('Ethanol Blend [%]')
    ylabel('Efficiency [-]')
    xlim([0 inf])
    ylim([0 0.4])
    
    plot([Results.(load(l)).Percentage], [Results.(load(l)).Efficiency])
    %scatter([0,0.05,0.1,0.15],[Experiment_Data([l_flip l_flip+3 l_flip+6 l_flip+9]).Efficiency].*(1/100))
    
end
legend('No Load', 'Half Load', 'Full Load' )
hold off
for l = 1:length(load)
    
    index_max = find([Results.(load(l)).Efficiency] == min([Results.(load(l)).Efficiency]));
    
    eth_opt(l) = Results.(load(l))(find([Results.(load(l)).Efficiency] == max([Results.(load(l)).Efficiency]))).Percentage;
end

figure 
hold on 
title('Comparison Idealized and Real Cycle')
xlabel('Volume [m^3]')
ylabel('Pressure [bar]')
xlim([0 inf])
ylim([0 inf])

plot(V_ideal,p_ideal.*1e-5)
plot(Results.('FullLoad')(1).Volume, Results.('FullLoad')(1).Pressure.*1e-5)
hold off

%% Subplot

plot_no = 0;

    for p = 1:length(eth)
        
        for l = 1:length(load)
        l_flip = length(load)+1-l;
        loadtype = char(load(l));
        plot_no = plot_no + 1;
        %Fix order
        subplot(length(eth),length(load),plot_no)
        title('Comparison for ' + convertCharsToStrings(num2str(100*eth(p))) + '% Ethanol, ' + convertCharsToStrings(loadtype(1:strlength(loadtype)-4)) + ' ' + convertCharsToStrings(loadtype(strlength(loadtype)-3:strlength(loadtype))))
        %title('test')
        xlabel('Volume [m^3]')
        ylabel('Pressure [bar]')
        
        hold on 
        plot(Results.(load(l))(p).Volume,Results.(load(l))(p).Pressure.*1e-5)
        
        plot(Experiment_Data(l_flip+3*(p-1)).Volume, Experiment_Data(l_flip+3*(p-1)).Pressure_filtered)
        xlim([0 inf])
        ylim([0 inf])
        
        hold off
        legend('Model','Experiment')
        
    end
    
end



%% Functions

function [Vcyl] = Vcyl(theta,B,r,L,V_c)
%This function is used to calculate the volume of the cylinder 
%   See lecture for derivation of formula
    x = r*cos(theta)+sqrt(L^2-r^2*sin(theta)^2);                            %Distance from center of crankshaft to center of piston head [m]
    d = L+r-x;                                                              %Distance of top of piston head to its maximum height [m]

    Vcyl = pi/4*B^2*d+V_c;                                                  %Cylinder Volume [m^3]
end

function [Acyl] = Acyl(theta,B,r,L)
%Calculate cylinder area 
    x = r*cos(theta)+sqrt(L^2-r^2*sin(theta)^2);                            %Distance from center of crankshaft to center of piston head [m]
    d = L+r-x;                                                              %Distance of top of piston head to its maximum height [m]
    
    Acyl = pi*B*d+2*pi/4*B^2;
end

function [dxdt] = dxdt(theta,dthetadt,B,r,L)
%Calculate the speed of the cylinder for given theta
dxdt = -(dthetadt*r*sin(theta)+0.5*(dthetadt*r^2*sin(2*theta))/(sqrt(L^2-0.5*r^2*(1-cos(2*theta)))));
end

function [dVdt] = dVdt(theta,dthetadt,B,r,L)
%Calculate derivative of volume with respect to time for given theta
    dVdt = pi/4*B^2*(dthetadt*r*sin(theta)+0.5*(dthetadt*r^2*sin(2*theta))/(sqrt(L^2-0.5*r^2*(1-cos(2*theta)))));
end

function [alpha] = Woschni(B,p,T,S)
%Calculate heat transfer coefficient using Woschni Relation
    v_p = 2*(3000)/(60)*S;                                                  %Average piston speed (used in head coeff relations)
    alpha = 3.26*B^(-0.2)*p^(0.8)*T^(-0.55)*(2.28*v_p)^(0.8);
end

function [alpha] = Honenberg(p,T,V,S)
%Calculate heat transfer coefficient using Honenberg Relation
    v_p = 2*(3000)/(60)*S;                                                  %Average piston speed (used in head coeff relations)
    alpha = 3.26*p^(0.8)*T^(-0.4)*V^(-0.06)*(v_p+1.4)^0.8;
end

function [x_frac] = Wiebe(n,a,theta,theta_s,theta_d)
%Fraction of mass combusted using Wiebe Function
    x_frac = 1-exp(-a*((theta-theta_s)/theta_d)^n);
end

function [dmdtheta] = dmdtheta(m_f,n,a,theta,theta_s,theta_d)
%Wiebe function from project manual 
    dmdtheta = m_f*n*a*(((theta-theta_s)/theta_d)^(n-1))/(theta_d)*exp(-a*((theta-theta_s)/theta_d)^n);
end
