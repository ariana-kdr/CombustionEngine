%% General


% Known Issues:
% - Indexing in for loop is not perfect yet
% - Since volume is a function of time ignition and valve exhaust are not
% instantaneous
% - Q_lhv behaves strangely when ethanol is added to the blend, and in
% general it has to be reconsidered due to the signs in the code not
% matching the signs in the slides 


clear all;
close all;
clc;


% Add directory of Nasa routines to Matlab-path
addpath('General/Nasa');    


% Load Nasa Database
TdataBase = fullfile('General\Nasa','NasaThermalDatabase.mat');
load(TdataBase);


% Constants 
global Runiv Pref Tref                                                      %Set global variables (so they cannot be changed)
Runiv = 8.314472;                                                           %Universal Gas Constant[J/K*mol]
Pref = 1.01235e5;                                                           %Reference Pressure (1atm) [Pa]
Tref = 298.15;                                                              %Reference Temperature [K]


% Loading chemical properties 
Fuel1 = 'Gasoline';                                                          % Make fuel its own variable for easy changes
Fuel2 = 'C2H5OH'; 
Species = Sp(myfind({Sp.Name},{Fuel1, Fuel2,'O2','CO2','H2O','N2'}));               % Subselection of species in database
NSpecies = length(Species);                                                 % Create variable for length of Species array for later use 
Mi = [Species.Mass];                                                        % Array of molecular masses for each component


%Dimensions (using dimensions found online)
B = 68e-3;                                                                  %Bore [m]
r = 27e-3;                                                                  %Radius of crank shaft [m]
S = 54e-3;                                                                  %Stroke [m]
L = 84.7e-3;                                                                %Length of rod [m]
r_c = 8.5;                                                                  %Compression Ratio [m]
V_d = pi/4*B^2*S;                                                           %Displacement Volume [m^3]
V_c = V_d/(r_c-1);                                                          %Clearance volume [m^3]
%% Real Cycle 
%Currently implemented:
% - Heat loss during: compression, ignition and expansion
% - Finite rate of combustion
% - Valve timing for intake


%Remaining:
% - Heat loss in all other cycles
% - Friction
% - Pumping/Negative Cycle
% - Valve timing for exhaust


%Parameters 
method_heat_coeff = 'Honenbe';                                              %Use either Woschni or Honenberg relation
t_w = 30e-3;                                                                %Estimate of thickness wall surrounding cylinder [m]
k = 14.4;                                                                   %Conductive heat transfer coefficient [W/mK]
ignition_offset = 25;                                                       %Degrees before TDC where ignition starts
ignition_duration = 40;

%Create struct to combine all the results of the model

eth = [0:0.01:1];                                                                  % ethanol fractions (can be any string of numbers between 0 and 1)
n_eth = length(eth);                                                               % number of ethanol blends considered


Results = struct('Blend',[],'Percentage', [], 'Volume',[],'Pressure',[],'Temperature',[],'Mass',[],'Entropy',[],'Work',[],'Heat',[], 'Efficiency', [], 'Power', []); 

for t = 1:n_eth
    Results(t).Blend = 100*eth(t) + "% ethanol";
end

%Create empty matrices for each state property

steps = 4001;                                                                           %Number of steps to be used for cycle. 10000 seems to be a good balance between precision and speed

p_test = zeros(1,steps);
m_test = zeros(1,steps);

a_range = 0.0000001:0.0000000005:0.000008;
a_mass = zeros(n_eth,length(a_range));
a_pres = zeros(n_eth,length(a_range));

%Time Values
t_end = 2*(60/3000);                                                        %End time [s] (one rotation is 0.01 sec however, one cycle is two revolutions)
dt = t_end/(steps-1);                                                       %Time step to solve differential equations [s]
dthetadt = 3000/60*2*pi;                                                    %Convert speed of engine to [rad/s]
time = [0:dt:t_end];                                                        %Time array [s]


%Create vector array of crank angle and volume as a function of time
i = 0;                                                                      %Index Value
for t = [0:dt:t_end]
    i = i+1;                                                                %Update Index
    theta_crank(i) = t*dthetadt;                                            %Calculate angle for each time instance
    V_real(i) = Vcyl(theta_crank(i),B,r,L,V_c);                             %Calculate volume for angle using volume function
end
theta_crank_degrees = theta_crank.*(180/pi);                                %Convert crank angle to degrees for easy life


%Set the angle for the start position of each of the stages
theta_intake_stroke = 0;
theta_compression = 180;


%Find the index in the crank angle vector array for which it is at this
%angle
index_intake_stroke = max(find(theta_crank_degrees==theta_intake_stroke));
index_compression = max(find(theta_crank_degrees<theta_compression))+1;



%Find the time instant for each start of the strokes
time_intake_stroke = time(index_intake_stroke);
time_compression = time(index_compression);









p = 1;
for e = eth

%Calculate Fuel Properties
x = (1 - e)*Species(1).Elcomp(3) + e*Species(2).Elcomp(3);                  % Summing the moles of given ethanol/gasoline ratio for carbon
y = (1 - e)*Species(1).Elcomp(2) + e*Species(2).Elcomp(2);                  % Summing the moles of given ethanol/gasoline ratio for hydrogen
z = (1 - e)*Species(1).Elcomp(1) + e*Species(2).Elcomp(1);                  % Summing the moles of given ethanol/gasoline ratio for oxygen

c = x + y/4 - z/2;


% Number of moles in chemical reaction
N_reac = [1-e e c 0 0 c*3.76];


% Mole Fractions using balanced chemical equation
X_reac = N_reac/sum(N_reac);


%Convert to mass fractions
Y_reac = (X_reac.*Mi)/(X_reac*Mi');


%Molar mass
M_reac = X_reac*Mi';


%Gas constants
R_reac = Runiv/M_reac;

h = 1;

for a = a_range
i = 1;
m_test(i) = (Pref*V_real(i))/(Tref*R_reac);
p_test(i) = Pref;

for t = [time_intake_stroke+dt:dt:time_compression]
    i = i+1;

    dmdt = a*(Pref-p_test(i-1));
    m_test(i) = m_test(i-1)+dt*dmdt;

    p_test(i)= (m_test(i)*R_reac*Tref)/(V_real(i));   
    
end

a_mass(p,h) = (Y_reac(1) + Y_reac(2)) * m_test(find(m_test,1,'last'));
a_pres(p,h) = p_test(find(p_test,1,'last'));
h = h + 1;
end 

p = p + 1;
end



filename = 'intake_constant.mat';
save(filename, "a_pres","a_mass","a_range","-mat")

figure()
hold on
title('Fuel Intake')
xlabel('Intake constant')
ylabel('Mass of fuel [kg]')

for b = 1:n_eth
plot(a_range,a_mass(b,:))
end 
legend(100*eth + "% Ethanol", 'location', 'eastoutside')
hold off

figure()
hold on
title('Presssure after Compression')
xlabel('Intake constant')
ylabel('Pressure [Bar]')

for b = 1:n_eth
plot(a_range,a_pres(b,:).*1e-5)
end 
legend(100*eth + "% Ethanol", 'location', 'eastoutside')
hold off

function [Vcyl] = Vcyl(theta,B,r,L,V_c)
%This function is used to calculate the volume of the cylinder 
%   See lecture for derivation of formula
    x = r*cos(theta)+sqrt(L^2-r^2*sin(theta)^2);                            %Distance from center of crankshaft to center of piston head [m]
    d = L+r-x;                                                              %Distance of top of piston head to its maximum height [m]

    Vcyl = pi/4*B^2*d+V_c;                                                  %Cylinder Volume [m^3]
end

function [Acyl] = Acyl(theta,B,r,L)
%Calculate cylinder area 
    x = r*cos(theta)+sqrt(L^2-r^2*sin(theta)^2);                            %Distance from center of crankshaft to center of piston head [m]
    d = L+r-x;                                                              %Distance of top of piston head to its maximum height [m]
    
    Acyl = pi*B*d+2*pi/4*B^2;
end

function [vq] = alpha_mass(x,v,e,xq)
n_e = e*100 + 1;
vq = interp1(x(n_e,:),v,xq, 'nearest')

%calculate alpha based on desired ethanol percentage and masss intake
end

function [dxdt] = dxdt(theta,dthetadt,B,r,L)
%Calculate the speed of the cylinder for given theta
dxdt = -(dthetadt*r*sin(theta)+0.5*(dthetadt*r^2*sin(2*theta))/(sqrt(L^2-0.5*r^2*(1-cos(2*theta)))));
end

function [dVdt] = dVdt(theta,dthetadt,B,r,L)
%Calculate derivative of volume with respect to time for given theta
    dVdt = pi/4*B^2*(dthetadt*r*sin(theta)+0.5*(dthetadt*r^2*sin(2*theta))/(sqrt(L^2-0.5*r^2*(1-cos(2*theta)))));
end

function [alpha] = Woschni(B,p,T,S)
%Calculate heat transfer coefficient using Woschni Relation
    v_p = 2*(3000)/(60)*S;                                                  %Average piston speed (used in head coeff relations)
    alpha = 3.26*B^(-0.2)*p^(0.8)*T^(-0.55)*(2.28*v_p)^(0.8);
end

function [alpha] = Honenberg(p,T,V,S)
%Calculate heat transfer coefficient using Honenberg Relation
    v_p = 2*(3000)/(60)*S;                                                  %Average piston speed (used in head coeff relations)
    alpha = 3.26*p^(0.8)*T^(-0.4)*V^(-0.06)*(v_p+1.4)^0.8;
end

function [x_frac] = Wiebe(n,a,theta,theta_s,theta_d)
%Fraction of mass combusted using Wiebe Function
    x_frac = 1-exp(-a*((theta-theta_s)/theta_d)^n);
end

function [dmdtheta] = dmdtheta(m_f,n,a,theta,theta_s,theta_d)
%Wiebe function from project manual 
    dmdtheta = m_f*n*a*(((theta-theta_s)/theta_d)^(n-1))/(theta_d)*exp(-a*((theta-theta_s)/theta_d)^n);
end
