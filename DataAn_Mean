clear all;close all;clc
%% add general to matlab path

addpath('General');
%%
DataDir='C:\Users\20202587\Documents\TU Eindhoven\Jaar 2\4GB10 Combustion Engine\Experiment 2\Second attempt\Training 2';  % The directory with the files. (Make sure you have backups!)
ColumnOrder={'time','Encoder','Sensor'};
%% Constants

rpm = 3000; % RPM
t_r = 60/rpm; % Period
omega = (2*pi*rpm)/60; % Angular velocity
%% Converting and Importing the Data

FDir= dir(DataDir); 
FinalIndex = 0;
for iTest=1:3:34
%for iTest=1:3:8
    clearvars -except iTest DataDir ColumnOrder rpm t_r omega FDir FinalIndex Experiment_Data
    P_length = 0;
    FinalIndex = FinalIndex+1;
    Files = FDir(2+iTest:3+iTest,:);
    %Files = FDir(3:5,:);
    %%Files = FDir(3:2+Dim_grid^2,:);                                                      % remove '.' and '..', limit the amount of plots to 9
    nFiles=length(Files);                                                       % dir gives a directory listing, only *.txt files in this case
    h=waitbar(0,'Converting');
    for i=1:nFiles
        waitbar(i/nFiles,h);
        fname       = Files(i).name;                                            % Take a name from the list
        curfilename = fullfile(DataDir,fname);                                  % Create the full name
        %comma2point_overwrite(curfilename);                                    % Convert comma to dot decimal separator, this is extremly fast!!
    end
    delete(h)


for iFiles=1:nFiles
    fname       = Files(iFiles).name;                                       % Take a name from the list
    curfilename = fullfile(DataDir,fname);                                  % Create the full name
    Data        = ImportData4GB10(curfilename,ColumnOrder);                 % Read the data. Type help ImportData4GB10
    % store it for each case. Yes a struct that contains a struct and other
    % things. Why not?
    Case(iFiles).Data     = Data;
    Case(iFiles).filename = fname;
    Case(iFiles).DataDir  = DataDir;
    % preamble, put data in easy to use arrays
    t      = Data.t;
    p      = Data.pulse;
    V      = Data.Volt;
    RevEnd = Data.RevEnds;
    V_s = 5; % Maximum voltage
    P = ((V./V_s)-0.115)/(0.00385*4); % Conversion from voltage to pressure

%     % Input of mean values
%     if contains(fname,'no') == true
%         Q = 75;
%     elseif contains(fname,'half') == true
%         Q = 60;
%     elseif contains(fname,'full') == true
%         Q = 50;
%     else
%         Q = 60;
%     end
%     P = movmean(P,Q); % Remove noise
    nCyc = floor((length(RevEnd) - 1)/2 - 1); % Number of cycles

    % Input of amount of wanted cycles
    out = 10;
    for i = 1:out
        Q = nCyc-i;
    end

    %Drift correction
    P_amb = 1.012;                                                          %Ambient pressure according to wheather report
    %%Ca_off = 1.4779;                                                        %Crank angle offset found according to ignition
    Ca_off = 1.445; %New TDC
    P_exh = P(RevEnd - round(Ca_off/(4 * pi)*mean(diff(RevEnd))));          %Exhaust pressure at end of exhaust
    T_exh = [ones(length(t(RevEnd)),1) t(RevEnd)];
    Reg = T_exh\P_exh;                                                      %Regression between pressure and time

    P_drift = P + (P_amb - Reg(1,:)) - Reg(2,:) * t;

    %Find and store mean cycle length
    Cyclen = round(2 * mean(diff(RevEnd)));

%     subplot(Dim_grid,Dim_grid,iFiles)              %Create a 3x3 subplot
%     title(fname(1:end-4));
%     xlabel('Volume [m^3]');
%     ylabel('Pressure [bar]');
%     %legend('Cycle 1','Cycle 2','Cycle 3','Cycle 4','Cycle 5','Cycle 6','Cycle 7','Cycle 8','Cycle 9','Cycle 10');
%     hold on
    
    for iCyc = 1:nCyc-Q
        Cycle_s = 2*iCyc; % Start of one cycle
        Cycle_e = Cycle_s+2; % End of one cycle

        t_c = t(RevEnd(Cycle_s):RevEnd(Cycle_e)); % Time of one cycle
        t_c = t_c - t_c(1);

        P_c = P_drift(RevEnd(Cycle_s):RevEnd(Cycle_e)); % Pressure of the specific cycle(s)

        omega_m = (4*pi)/max(t_c);              % Determined angular velocity for Ca

        Ca = omega_m*t_c - Ca_off;                       % Crank angle

        %[~,P_max(iCyc)] = max(P(RevEnd(Cycle_s):RevEnd(Cycle_e)));
        %P_max_rel(iCyc) = P_max(iCyc)/length(P(RevEnd(Cycle_s):RevEnd(Cycle_e)));

        V_c = V_cyl(Ca); % Volume using the function script

        %Calculting a mean cycle
        for ii = 1:Cyclen
            idx = ii/Cyclen * (RevEnd(Cycle_e) - RevEnd(Cycle_s));
            P_mat(ii,iCyc) = interp1(P_c,idx,'nearest');
            t_mat(ii,:) = interp1(t_c,idx);
            V_mat(ii,iCyc) = interp1(V_c,idx,'nearest');
        end

    end

    %Finding the mean cycle and storing it
    V_ci = mean(V_mat,2);
    P_ci = mean(P_mat,2);

    Case(iFiles).Data.P_ci = P_ci;
    Case(iFiles).Data.V_ci = V_ci;

%     hold on
%     title("Comparing the mean cycles");
%     xlabel('Volume [m^3]');
%     ylabel('Pressure [bar]');
%     legend('Run 1', 'Run 2', 'Run 3', 'Mean of mean');
%     plot(V_ci,P_ci);
    
    %Finding the total length of the mean cycles
    P_length = P_length+length(P_ci);

 
end

%Finding the average length of the mean cycles
P_l_average = P_length/2;

%Finding the mean cycle of the mean cycle
for iFiles=1:nFiles
    for i = 1:P_l_average
        idx = i/P_l_average * (length(Case(iFiles).Data.P_ci)-1);
        P_ci_mat(i,iFiles) = interp1(Case(iFiles).Data.P_ci,idx,'nearest');
        V_ci_mat(i,iFiles) = interp1(Case(iFiles).Data.V_ci,idx,'nearest');
    end 
end    

% for i = 1:P_l_average
%         idx = i/P_l_average * (length(Case(iFiles).Data.P_ci)-1);
%         P_ci_mat(i,iFiles) = interp1(Case(iFiles).Data.P_ci,idx,'nearest');
%         V_ci_mat(i,iFiles) = interp1(Case(iFiles).Data.V_ci,idx,'nearest');
% end 

V_ci_total = mean(V_ci_mat,2);
P_ci_total = mean(P_ci_mat,2);

%Code used to export cycles

data_temp = [];
data_temp(:,1) = P_ci_total;
data_temp(:,2) = V_ci_total;
data_temp = data_temp(2:end,:);

    % Getting interpolation constant
    if contains(fname,'no') == true
        Q = 0.5*10^-4;
    elseif contains(fname,'half') == true
        Q = 0.5*10^-5;
    elseif contains(fname,'full') == true
        Q = 0.5*10^-4;
    else
        Q = 10^-5;
    end

datasample = [data_temp(1,:);data_temp(end,:)];
if datasample(1,1)>datasample(end,1)
    data_temp2(:,1) = (datasample(end,1):Q:datasample(1,1))';
else
data_temp2(:,1) = (datasample(1,1):Q:datasample(end,1))';
end

data_temp2(:,2) = interp1(datasample(:,1),datasample(:,2),data_temp2(:,1));

data_final = [data_temp;data_temp2];

%writematrix(data_final, fname);

%Removing noise for seperate dataset
    if contains(fname,'no') == true
        Q = 45;
    elseif contains(fname,'half') == true
        Q = 30;
    elseif contains(fname,'full') == true
        Q = 20;
    else
        Q = 40;
    end
    P_filtered = movmean(data_final(:,1),Q); % Remove noise

%     figure
%       hold on
%     title("Final mean cycle for 0% ethanol full load");
%     xlabel('Volume [m^3]');
%     ylabel('Pressure [bar]');
% plot(data_final(:,2), P_filtered)

%Work, power and efficiency calculations
W = 1/2*trapz(data_final(:,2),data_final(:,1))*10^5; %Work in Joule
P = W*3000/60;                                                                    %Power of engine [W]

   Q_lhv = [4.2894e7 4.3525e7 4.4227e7 4.5012e7];
    if contains(fname,'0 eth') == true
        x = 1;
    elseif contains(fname,'5 eth') == true
        x = 2;
    elseif contains(fname,'10 eth') == true
        x = 3;
    elseif contains(fname,'15 eth') == true
        x = 4;
    end
Q = Q_lhv(1,x);    
    
m_dot = importdata('C:\Users\20202587\Documents\TU Eindhoven\Jaar 2\4GB10 Combustion Engine\Experiment 2\massflow_mean.txt');
m_dot_max = importdata('C:\Users\20202587\Documents\TU Eindhoven\Jaar 2\4GB10 Combustion Engine\Experiment 2\massflow_max.txt');
m_dot_min = importdata('C:\Users\20202587\Documents\TU Eindhoven\Jaar 2\4GB10 Combustion Engine\Experiment 2\massflow_min.txt');
    if contains(fname,'no') == true
        m_flow = m_dot(x,1);  % No load flows
        m_flow_max = m_dot_max(x,1);
        m_flow_min = m_dot_min(x,1);
    elseif contains(fname,'half') == true
        m_flow = m_dot(x,2);
        m_flow_max = m_dot_max(x,2);
        m_flow_min = m_dot_min(x,2);
    elseif contains(fname,'full') == true
        m_flow = m_dot(x,3);
        m_flow_max = m_dot_max(x,3);
        m_flow_min = m_dot_min(x,3);
    end

    
eta = P/(Q*m_flow*10^-3) * 100; %Efficiency in %
eta_min = P/(Q*m_flow_max*10^-3) * 100; %Minimum efficiency in %
eta_max = P/(Q*m_flow_min*10^-3) * 100; %Maximum efficiency in %

Experiment_Data(FinalIndex).Index = FinalIndex;
Experiment_Data(FinalIndex).Name = fname(1:end-6);
Experiment_Data(FinalIndex).Pressure = data_final(:,1);
Experiment_Data(FinalIndex).Volume = data_final(:,2);
Experiment_Data(FinalIndex).Pressure_filtered = P_filtered;
Experiment_Data(FinalIndex).Work = W;
Experiment_Data(FinalIndex).Power = P;
Experiment_Data(FinalIndex).Efficiency = eta; %In percent!
Experiment_Data(FinalIndex).EfficiencyMin = eta_min; %In percent!
Experiment_Data(FinalIndex).EfficiencyMax = eta_max; %In percent!

end
